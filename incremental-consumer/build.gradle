apply plugin: 'java'
compileJava {
    options.incremental = true
}

sourceCompatibility = 1.7
version = '1.0'
jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart', 'Implementation-Version': version
    }
}

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }

    dependencies {
        classpath 'com.github.bmsantos:cola-tests:0.2.0'
        classpath 'com.github.bmsantos:cola-gradle-plugin:0.2.0'
    }
}

apply plugin: 'maven'
repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

dependencies {
    compile 'commons-collections:commons-collections:3.2'
    testCompile 'org.slf4j:slf4j-simple:1.7.7'
    testCompile 'com.github.bmsantos:cola-tests:0.2.0'
    testCompile 'junit:junit:4.+'
}

apply plugin: 'cola'
cola {
    ideBaseClass = 'org.gradle.cola.tests.TestBase'
    ideTestMethod = 'toBeRemoved'
    includes = ['org/gradle/cola/tests/**'] 
    excludes = ['something/else/**', 'and/some/CompiledFile.class']
}
icolac.inputDir = file(compileTestJava.destinationDir)
icolac.destinationDir = file("${project.buildDir}/colac")
icolac.dependsOn testClasses
icolac.mustRunAfter testClasses

task(fixTestClassPath) << {
    // Fix test task classpath (this should be done automatically by the test task
    // since the destinationDir is modified through configuration.
    def cp = sourceSets.test.runtimeClasspath
    def filteredCp = files(test.testClassesDir).plus(cp.filter() { f -> !f.equals(icolac.inputDir) })
    sourceSets.test.runtimeClasspath = filteredCp
}
fixTestClassPath.mustRunAfter icolac

test {
    useJUnit()
    dependsOn icolac
    dependsOn fixTestClassPath
    testClassesDir = icolac.destinationDir
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}
